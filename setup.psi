
## admin check
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Warning "Need admin rights."
    exit
}

## Install tasty Chocolatey :D
try {
    Set-ExecutionPolicy Bypass -Scope Process -Force
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
    iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
} catch {
    Write-Error "Error installing tasty chocolatey: $_"
    exit
}

## to install:
$programs = @(
    @{ Name = "Visual Studio Code"; ChocoName = "vscode"; FileName = "Code.exe" },
    @{ Name = "Obsidian"; ChocoName = "obsidian"; FileName = "Obsidian.exe" },
    @{ Name = "Discord"; ChocoName = "discord"; FileName = "Discord.exe" },
    @{ Name = "Google Chrome"; ChocoName = "googlechrome"; FileName = "chrome.exe" },
    @{ Name = "Mozilla Firefox"; ChocoName = "firefox"; FileName = "firefox.exe" },
    @{ Name = "7-Zip"; ChocoName = "7zip"; FileName = "7zFM.exe" },
    @{ Name = "PowerToys"; ChocoName = "powertoys"; FileName = "PowerToys.exe" },
    @{ Name = "Windows Terminal"; ChocoName = "microsoft-windows-terminal"; FileName = "wt.exe" },
    @{ Name = "Steam"; ChocoName = "steam"; FileName = "Steam.exe" },
    @{ Name = "Docker Desktop"; ChocoName = "docker-desktop"; FileName = "Docker Desktop.exe" }
)

## search in static Paths + Windows Registry
function Find-Program {
    param ([string]$fileName)
    # Suche in statischen Pfaden
    $paths = Get-PSDrive -PSProvider FileSystem | ForEach-Object { $_.Root + "Program Files\", $_.Root + "Program Files (x86)\" }
    foreach ($path in $paths) {
        if (Get-ChildItem $path -Recurse -Filter $fileName -ErrorAction SilentlyContinue) {
            return $true
        }
    }
    # Suche in der Windows Registry
    $regPaths = @("HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\", "HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\")
    foreach ($regPath in $regPaths) {
        $items = Get-ItemProperty "$regPath*" -ErrorAction SilentlyContinue | Where-Object { $_.DisplayName -like "*$fileName*" }
        if ($items -and $items.InstallLocation -and (Test-Path $items.InstallLocation)) {
            return $true
        }
    }
    return $false
}

## install, if not already installed :3
foreach ($program in $programs) {
    if (-not (Find-Program -fileName $program.FileName)) {
        Write-Output "Installing $($program.Name)..."
        try {
            choco install $program.ChocoName -y
        } catch {
            Write-Error "Error during installation of this fcker $($program.Name): $_"
        }
    }
    else {
        Write-Output "$($program.Name) is already installed."
    }
}
